services:

  broker:
    container_name: broker
    build:
      context: ./broker
      dockerfile: ./broker.dockerfile
    restart: always
    ports:
      - "8000:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      ENVIRONMENT: development
      # PRODUCTION_USER_ENDPOINT:
      # PRODUCTION_COMPILER_ENDPOINT:
      # PRODUCTION_JUDGE_ENDPOINT:

  user:
    container_name: user
    build:
      context: ./user
      dockerfile: ./user.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      ENVIRONMENT: development
      # PRODUCTION_DB_URL:

  content:
    container_name: content
    build:
      context: ./content
      dockerfile: ./content.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      ENVIRONMENT: development
      # PRODUCTION_DB_URL:
      # PRODUCTION_DB_USERNAME:

  judge:
    container_name: judge
    build:
      context: ./judge
      dockerfile: ./judge.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      ENVIRONMENT: development
      # PRODUCTION_DB_URL:
      # PRODUCTION_DB_USERNAME:
      # PRODUCTION_DB_PASSWORD:

  compiler:
    container_name: compiler
    build:
      context: ./compiler
      dockerfile: ./compiler.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1

  postgres:
    container_name: db-users
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/

  mongo:
    container_name: db-testcases
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: db
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    volumes:
      - ./db-data/mongo/:/data/db
